{% extends 'base.jinja' %}

{% block content %}
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
/*  -- CSS NOTE --  
    <div class> -> use '.'
    <div id>    -> use '#'   */
    body {
        background-color: #F6F5F3;
    }

    *{
        font-family: 'Courier New', monospace;
    }

    .heading {
        font-weight: bold;
        color: #1b3a6a;
    }

    .user_role{
        font-weight: bold;
    }

    /* overall text for the whole page*/
    .text {
        font-weight: bold;
        margin-top: 2px;
        margin-bottom: 2px;
    }

    #hidden_mute_msg {
        color: white;
    }

    /* -- for side nav & article - both LEFT & RIGHT within the container --
        defined: <div class='container'>
    /*   USYD CODE CITATION ACKNOWLEDGEMENT
    I declare that the following lines of code have been taken from the
    website titled: "CSS Flexbox"
    Original URL
    https://www.w3schools.com/css/tryit.asp?filename=trycss3_flexbox
    Last access May, 2024  */
    .container {
        display: flex;
        height: 100vh;
    }

    /*  -- ARTICLE LIST on the LEFT -- 
        defined: <nav class="side_nav">   */
    .side_nav {
        width: 45%;
        height: 100%; 
        overflow: auto;
        padding-top: 15px;
        padding-left: 5px;
        resize: horizontal;
        background-color: #e6e6e6;
    }

    /*  defined: <div class="article">   */
    .article {
        padding: 0;  
        flex-grow: 1;
        cursor: pointer;
        list-style-type: none;
        /* no bullet points */
        /*   USYD CODE CITATION ACKNOWLEDGEMENT
        I declare that the following lines of code have been taken from the
        website titled: "CSS list-style-type Property"
        Original URL
        https://www.w3schools.com/cssref/pr_list-style-type.php
        Last access May, 2024  */
    }

    .comment {
        color: #a6a6a6;
        font-weight: bold;
    }

    /* -- username text in the side nav -- */
    .article_username, .comment_username, .format_username {
        display: block; /* in new line */
        font-size: 0.9em;
        font-weight: bold;
        padding-top: 5px;
        padding-bottom: 10px;
        color: #1b3a6a;
    }

    .article_title {
        display: block;
        font-size: 1.5em;
        font-weight: bold;
    }

    .article_content {
        display: block;
        white-space: pre-wrap;
    }

    .article_private {
        display: block;
        color: #E68A8C;
        font-weight:  bold;
    }

    /* -- NAVIGATION BAR --
       defined: <nav class="top_nav">  */
    .top_nav {
        bottom: 0;
        width: 100%;
        padding: 5px;
        overflow: auto;
        border-top: none;
        background-color: #efefef; 
        border-bottom: 1px solid black;
    }

    /* -- TITLE BAR - Knowledge Repository & Create button --
       defined: <nav class="bottom_nav"> */
    .bottom_nav {
        bottom: 0;
        width: 100%;
        padding: 5px; 
        display: flex; 
        overflow: auto;
        border-top: none;
        background-color: #efefef; 
        justify-content: space-between;
        border-bottom: 1px solid black;
    }

    /* defined: <button class="create_article-button"> */
    .create_article-button {
        float: right;
        font-weight: bold;
        margin: 5px 10px 5px 10px;
    }

    .mute_users-button {
        float: right;
        margin: 5px 0px 5px 0px;
    }

    /* -- selected article on the RIGHT --
       defined: <div id="article"> */
    #article {
        width: 65%;
        height: 100%; 
        overflow: auto;
        padding-top: 15px;
        padding-left: 30px;
        list-style-type: none;
    }

    /* defined: <div id=".comment-list"> */
    #comment-list {
        padding-top: 15px;
        list-style-type: none;
    }

    /* defined: comment_button.className = 'comment-class'; */
    .comment-class {
        margin-top: 15px;
    }

    .edit-class, .delete_article-class {
        margin-top: 15px;
        margin-left: 10px;
    }

    .delete_comment-class {
        margin-top: 10px;
    }

    .button {
        color: white;
        cursor: pointer;
        font-weight: bold;
        padding: 5px 20px;
        margin-right: 10px;
        border-radius: 8px;
        border-width: 0.5px;
        background: #1b3a6a;
    }

    .button:hover {
        background: #E68A8C;
    }

    /* defined: <button class="home-button"> */
    .home-button, .addfriend-button, .friendrequest-button, 
    .friendlist-button, .logout-button, .repo-button {
        float: left;
        margin-top: 12px;
        padding: 5px 10px;
        margin-right: 10px;
        border-radius: 8px;
        border-width: 0.5px;
        border-color: #dad8d8;
    }

    .home-button:hover, .addfriend-button:hover, .friendrequest-button:hover, 
    .friendlist-button:hover, .logout-button:hover, .repo-button:hover {
        background: #e7e7e7;
    }

    /* -- for NEW ARTICLE -- overall template --
       defined: <div class="modal">
       
    USYD CODE CITATION ACKNOWLEDGEMENT
    I declare that the following lines of code have been taken from the
    website titled: "How TO - CSS/JS Modal"
    Original URL
    https://www.w3schools.com/howto/howto_css_modals.asp
    Last access May, 2024  */
    .modal {
        top: 0;
        left: 0;
        z-index: 1;
        width: 100%;
        height: 100%;
        display: none;
        overflow: auto;
        position: fixed;
        padding-top: 100px;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
    }

    /* defined: <div class="modal-header"> */
    .modal-header {
        color: white;
        padding: 2px 16px;
        background-color: #1b3a6a;
    }

    /* defined: <div class="modal-body"> */
    .modal-body {
        padding: 2px 16px;
    }

    /* defined: <div class="modal-content"> */
    .modal-content {
        padding: 0;
        width: 80%;
        margin: auto;
        position: relative;
        border: 1px solid #888;
        background-color: #fefefe;
        box-shadow: 0 4px 8px 0 black 6px 20px 0 black;
    }

    /* defined: <span class="close"> */
    .close {
        float: right;
        color: white;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover, .close:focus {
        color: #000;
        cursor: pointer;
        text-decoration: none;
    }

    /* -- for NEW ARTICLE - 2 input boxes --
    defined: <section id="title_box"> */
    #title_box, #content_box, #comment_box {
        padding: 10px 20px;  /* 20 - left right margin */
    }

    #user_to_be_muted_box {
        padding: 10px 10px;
    }

    /* defined: <textarea id="new_title> */
    #new_title, #new_content, #edit_title, #edit_content {
        width: 100%;
        line-height: 20px; 
    }

    #new_content {
        height: 200px;
    }

    textarea {
        font-size: medium;
        font-weight: bold;
    }

    /* defined: <button class="post_article-button"> */
    .post_article-button {
        float: right
    }
</style>
</head>

{# ---------------------------------------------------------------------------------------------------------------------------------------------------------------- #}

<body>
{# NAVIGATION BAR #}
<nav class="top_nav" style="border-bottom: 1px solid black;">
    <button class="btn home-button" onclick="to_homepage()">Home</button>

    {% if role == 'student' %}
        <button class="btn addfriend-button" onclick="to_addfriend()">Add Friend</button>
        <button class="btn friendrequest-button" onclick="to_friendrequest()">Friend Request</button>
        <button class="btn friendlist-button" onclick="to_friendlist()">Friend List</button>
    {% endif %}
    
    <button class="btn logout-button" onclick="to_logout()">Logout</button>
    
    <ol style="float: right">
        <li class="user_role" style="display:inline-block">{{ username }} / {{ role }} </li>
    </ol>
</nav>

{# TITLE BAR - Knowledge Repository & Create button #}
<nav class="bottom_nav" style="border-bottom: 1px solid black;">
    <h1 class="heading">Knowledge Repository</h1>
    <ol style="float: right">

        {# for staff, unmuted user ONLY #}
        {% if is_muted == 'false' or not user_is_muted %}
            <button class="button create_article-button" onclick="to_create_article()">Create Post</button>
        {% endif %}
    </ol>
</nav>

{# for side nav & article - both LEFT & RIGHT #}
<div class='container'>

    <nav class="side_nav">
        <div lang="en-GB" tabindex="0" class="article">
            <div lang="en-GB" tabindex="0" id='article-list'></div>
        </div>
    </nav>

    <div id="article">
        <p lang="en-GB" tabindex="0" id='content-list'></p>     {# for the selected article #}
        <div lang="en-GB" tabindex="0" id='comment-list'></div> {# for all comment(s) for selected article #}
    </div>

    {# NEW ARTICLE MODAL #}
    <div lang="en-GB" tabindex="0" id="newArticleModal" class="modal">
        <div lang="en-GB" tabindex="0" class="modal-content">

            <div lang="en-GB" tabindex="0" class="modal-header">
                <span class="close">&times;</span>
                <h2 lang="en-GB" tabindex="0" >New Article</h2>
            </div>

            <div lang="en-GB" tabindex="0" class="modal-body">
                {# input box for TITLE #}
                <section id="title_box">
                    <p lang="en-GB" tabindex="0" class="text">Title: </p>
                    <textarea tabindex="0" id="new_title" placeholder="Enter your article title here"></textarea>
                </section>

                {# input box for CONTENT #}
                <section id="content_box">
                    <p lang="en-GB" tabindex="0" class="text">Content: </p>
                    <textarea lang="en-GB" tabindex="0" id="new_content" style="width: 100%; height: 200px;" placeholder="Enter your article content here"></textarea>
                    <br>

                    {# posting anonymous checkbox #}
                    <input tabindex="0" type="checkbox" id="posting_no_name" name="posting_no_name">
                    <label tabindex="0" for="posting_no_name" style="font-size: 14px;">Anonymous</label>
                    
                    {# posting privately checkbox #}
                    <input tabindex="0" type="checkbox" id="posting_private" name="posting_private">
                    <label tabindex="0" for="posting_private" style="font-size: 14px;">Private (only to you and staff)</label>

                    {# POST button #}
                    <button tabindex="0" class="btn post_article-button" onclick="to_post_article()">Post</button>
                    <br>
                </section>
            </div>
        </div>
    </div>
</div>


{# COMMENT MODAL #}
<div lang="en-GB" tabindex="0" id="commentModal" class="modal">
    <div lang="en-GB" tabindex="0" class="modal-content">

        <div lang="en-GB" tabindex="0" class="modal-header">
            <span class="close">&times;</span>
            <h2>New Comment</h2>
        </div>

        <div lang="en-GB" tabindex="0" class="modal-body">
            <section id="comment_box">
                <p lang="en-GB" tabindex="0" class="text">Comment: </p>
                {# input box for COMMENT #}
                <textarea lang="en-GB" tabindex="0" id="new_comment" style="width: 100%; height: 100px;" placeholder="Enter your comment here :)"></textarea>
                {# COMMENT button #}
                <button class="btn comment-button" onclick="insert_comment_into_db()">Comment</button>
            </section>
        </div>
    </div>
</div>


{# EDIT ARTICLE MODAL #}
<div lang="en-GB" tabindex="0" id="editArticleModal" class="modal">
    <div lang="en-GB" tabindex="0" class="modal-content">

        <div lang="en-GB" tabindex="0" class="modal-header">
            <span class="close">&times;</span>
            <h2>Edit Article</h2>
        </div>

        <div lang="en-GB" tabindex="0" class="modal-body">
            {# input box for TITLE #}
            <section id="title_box">
                <p lang="en-GB" tabindex="0" class="text">Title: </p>
                <textarea id="edit_title" placeholder="{{ format_title }}"></textarea>
            </section>

            {# input box for CONTENT #}
            <section id="content_box">
                <p lang="en-GB" tabindex="0" class="text">Content: </p>
                <textarea id="edit_content" style="width: 100%; height: 200px;" placeholder="New content here"></textarea>
                <br>
                <button class="btn post_article-button" onclick="edit_article_into_db()">Confirm</button>
                <br>
            </section>
        </div>
    </div>
</div>



</body>
</html>

{# ---------------------------------------------------------------------------------------------------------------------------------------------------------------- #}


<script src="/static/js/libs/socket.io.min.js"></script>

<script>
    let username = "{{ username }}";
    let user_id = "{{ user_id }}";
    let role = "{{ role }}";
    let is_muted = "{{ is_muted }}";
    let user_is_muted = "{{ is_muted }}";
    Cookies.set('username', username);

    const socket = io();

    // resizable side nav
    /*    USYD CODE CITATION ACKNOWLEDGEMENT
    I declare that the following lines of code have been taken from the
    website titled: "Alternatives to the resize event with better performance"
    Original URL
    https://tigeroakes.com/posts/resize-event-alternatives/
    Last access May, 2024   */
    const sideNav = document.querySelector('.side_nav');
    sideNav.onresize = (event) => {
        sideNav.style.width = `${event.target.offsetWidth}px`;
    };

    //-- ARTICLE LIST @ LHS - side nav --//
    /*    USYD CODE CITATION ACKNOWLEDGEMENT
    I declare that the following lines of code have been taken from the
    website titled: "Document: createElement() method"
    Original URL
    https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
    Last access May, 2024   */
    socket.emit("view_article");
    socket.on('view_article_response', articles => {
        var article_left_list = document.getElementById("article-list");
        while(article_left_list.firstChild) {
            article_left_list.removeChild(article_left_list.firstChild);
        }
        // loop through ALL the articles from db
        articles.forEach(article => {
            console.log("testing private status  " + article.title + " == " + article.post_private);
            
            // only visible to the author and the staff
            //  ---- is a public post ----   || ----- is the author -----  || ------------------------------ are STAFF ------------------------------
            if (article.post_private == "no" || article.user_id == user_id || role == 'Academics' || role == 'Admin' || role == 'Administrative staff') {
                // make a list for each article
                var each_article = document.createElement('li');
                var article_title = document.createTextNode(article.title);
                var div = document.createElement('div');
                // add article_title to the div
                div.appendChild(article_title);

                if (article.post_private == "yes") {
                    var article_private = document.createElement('span');
                    article_private.className = 'article_private';
                    article_private.textContent = "Private"; // Add the desired text content to the 'span' element
                    div.appendChild(article_private);
                }

                // -- FORMAT USERNAME + ROLE --
                var article_username = document.createTextNode(article.username);
                // handle anonymous users' roles
                if (article.role === 'Anon') {
                    var article_role = document.createTextNode('');
                } else {
                    var article_role = document.createTextNode(' - ' + article.role);
                }
                var format_username = document.createElement('span');
                format_username.className = 'article_username';
                format_username.appendChild(article_username);
                format_username.appendChild(article_role);
                // add each username to the relevant title
                div.appendChild(format_username);

                // get all the titles and usernames
                each_article.appendChild(div);
                // put them into the main list
                article_left_list.appendChild(each_article);

                // create a divider
                /*    USYD CODE CITATION ACKNOWLEDGEMENT
                I declare that the following lines of code have been taken from the
                website titled: "HTML DOM HR Object"
                Original URL
                https://www.w3schools.com/jsref/dom_obj_hr.asp >>
                https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_hr_create
                Last access May, 2024   */
                var hr = document.createElement('hr');
                // display after every article
                each_article.appendChild(hr);

    // ----------------------------------------------------------------------------------------------------------------------------------------------------------------

                //-- FOR THE SELECTED ARTICLE TO BE DISPLAYED @ RHS --//
                each_article.addEventListener('click', the_selected_article => {

                    var content_left_list = document.getElementById('content-list');
                    var content_div = document.createElement('div');

                    // make the content on RHS to be replaced by the selected article, not appending onto the RHS
                    /*    USYD CODE CITATION ACKNOWLEDGEMENT
                    I declare that the following lines of code have been taken from the
                    website titled: "Node: removeChild() method"
                    Original URL
                    https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild
                    Last access May, 2024   */
                    while(content_left_list.firstChild) {
                        content_left_list.removeChild(content_left_list.firstChild);
                    }

                    // -- FORMAT TITLE --
                    var content_title = document.createTextNode(article.title);
                    var format_title = document.createElement('span');  // CSS format
                    format_title.className = 'article_title';
                    format_title.appendChild(content_title);
                    content_div.appendChild(format_title);

                    $("#edit_title").val(article.title);

                    // -- FORMAT USERNAME + ROLE --
                    var content_username = document.createTextNode(article.username);
                    // ignore anonymous user's role
                    if (article.role === 'Anon') {
                        var content_role = document.createTextNode('');
                    } else {
                        var content_role = document.createTextNode(' - ' + article.role);
                    }
                    var concat_username_role = document.createElement('span');
                    concat_username_role.className = 'article_username';
                    concat_username_role.appendChild(content_username);
                    // concatenate the role alongside the username
                    concat_username_role.appendChild(content_role);
                    content_div.appendChild(concat_username_role);

                    // -- FORMAT CONTENT --
                    var content_content = document.createTextNode(article.content);
                    var format_content = document.createElement('span');
                    format_content.className = 'article_content';
                    format_content.appendChild(content_content);
                    content_div.appendChild(format_content);

                    $("#edit_content").val(article.content);

                    // -- COMMENT BUTTON -- for staff, unmuted user
                    // if (is_muted == 'false' || role == 'staff') {
                    if (user_is_muted == 'false' || role == 'Academics' || role == 'Admin') {  
                        var comment_button = document.createElement('button');
                        comment_button.textContent = 'Comment';
                        comment_button.className = 'btn comment-class'; // css
                        comment_button.addEventListener('click', function() {
                            comment_on_article(article.article_id);
                        });
                        content_div.appendChild(comment_button);
                    }
                    // put them into the main list
                    content_left_list.appendChild(content_div);
                    
                    // -- EDIT BUTTON -- 
                    // only show for when the user created that article
                    // if ((role == 'Academics' || role == 'Admin' || user_id == article.user_id) && user_is_muted == 'false') {
                    if(
                        (role == 'Admin') ||(role == 'Academics') ||
                        (role == 'Administrative staff' && user_id == article.user_id) || 
                        (role == 'student' && user_is_muted == 'false' && user_id == article.user_id)) {

                        var edit_button = document.createElement('button');
                        edit_button.textContent = 'Edit';
                        edit_button.className = 'btn edit-class';
                        edit_button.addEventListener('click', function() {
                            for_EDIT_modal(article.article_id);
                        });
                        content_div.appendChild(edit_button);
                        content_left_list.appendChild(content_div);
                    }

                    // -- DELETE BUTTON -- for staff ONLY
                    if (role == 'Admin' || user_id == article.user_id) {
                        var delete_article_button = document.createElement('button');
                        delete_article_button.textContent = 'Delete';
                        delete_article_button.className = 'btn delete_article-class';
                        delete_article_button.addEventListener('click', function() {
                            if (confirm('Confirm to delete this article?')) {
                                // alert("Confirm to delete this article?");
                                console.log("test article_id - " + article.article_id);
                                for_DELETE_ARTICLE(article.article_id);
                            } else {
                                console.log('not deleted, do nothing');
                            }
                        });
                        content_div.appendChild(delete_article_button);
                        content_left_list.appendChild(content_div);
                    }
                    // -- FOR THE EDITTED ARTICLE --
                    // replace the original values for the selected article
                    /*    USYD CODE CITATION ACKNOWLEDGEMENT
                    I declare that the following lines of code have been taken from the
                    website titled: "Element: innerHTML property"
                    Original URL
                    https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML
                    Last access May, 2024   */
                    socket.on('view_content_response', edited_article => {
                        if (edited_article){
                            format_title.innerHTML = edited_article.title;  // title
                            format_content.innerHTML = edited_article.content;  // content
                        }
                    });

    // =====================================================================================

                    //-- ALL THE COMMENTS FOR THE SELECTED ARTICLE @ RHS --//
                    socket.emit("show_comment", article.article_id);
                    socket.on('display_comment', comments => {

                        var comment_list = document.getElementById("comment-list");

                        // -- FOR ONLY SHOWING THE COMMENTS FOR THAT ARTICLE --
                        while(comment_list.firstChild) {
                            comment_list.removeChild(comment_list.firstChild);
                        }

                        // -- FOR WHEN THERE IS COMMENT(S) FOR THE ARTICLE --
                        /*    USYD CODE CITATION ACKNOWLEDGEMENT
                        I declare that the following lines of code have been taken from the
                        website titled: "How to fix TypeError: forEach is not a function in JavaScript?"
                        Original URL
                        https://codedamn.com/news/javascript/how-to-fix-typeerror-foreach-is-not-a-function-in-javascript
                        Last access May, 2024   */
                        if (Array.isArray(comments)) {
                            // -- GETTING EACH OF THE COMMENT FOR THAT ARTICLE
                            comments.forEach(comment => {
                                // make a new list for ALL COMMENTS
                                var each_comment = document.createElement('li');
                                var comment_div = document.createElement('div');

                                // -- FORMAT USERNAME & ROLE --
                                if (comment.role === 'Anon') {
                                    var comment_role = document.createTextNode('');
                                } else {
                                    var comment_role = document.createTextNode(' - ' + comment.role);
                                }
                                var format_comment_username = document.createElement('span');
                                format_comment_username.className = 'comment_username'; // css format for username
                                var comment_username = document.createTextNode(comment.username);
                                // concatenate username and role
                                format_comment_username.appendChild(comment_username);
                                format_comment_username.appendChild(comment_role);
                                comment_div.appendChild(format_comment_username);
                                
                                // -- FORMAT CONTENT --
                                var format_comment_comment = document.createElement('span');
                                format_comment_comment.className = 'format_comment';
                                var comment_comment = document.createTextNode(comment.comment);
                                format_comment_comment.appendChild(comment_comment);
                                comment_div.appendChild(format_comment_comment);

                                // get all the comments
                                each_comment.appendChild(comment_div);
                                comment_list.appendChild(each_comment);
                                
                                // -- DELETE COMMENT BUTTON --
                                //  -- for staff -- || the comment author ONLY
                                if (role == 'Admin' || user_id == comment.user_id) {
                                    var delete_comment_button = document.createElement('button');
                                    delete_comment_button.textContent = 'Delete';
                                    delete_comment_button.className = 'btn delete_comment-class';
                                    delete_comment_button.addEventListener('click', function() {

                                        if (confirm('Confirm to delete this article?')) {
                                            // alert("Confirm to delete this comment?");
                                            console.log("test deleting comment -- id - " + article.article_id);
                                            console.log("test deleting comment -- content - " + comment_comment.nodeValue);
                                            for_DELETE_COMMENT(article.article_id, comment_comment.nodeValue);
                                        }
                                    });
                                    each_comment.appendChild(delete_comment_button);
                                }

                                // divider
                                var comment_hr = document.createElement('hr');
                                each_comment.appendChild(comment_hr);
                            });
                        }
                    });
                });
            }   
        });
    });


// -----------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------


    // for MUTED user to not able to perform actions
    socket.on('user_muted', function(data) {
        // getting the 'is_muted' directly from DB >> socket_routes.py
        let muted_username = data.muted_username;
        let is_muted_after_muted = data.is_muted_after_muted;

        if (username === muted_username) {
            // set the local variable 'is_muted' -> 'true'
            user_is_muted = is_muted_after_muted;  

            // set local storage 'is_muted' to 'true'
            // so when the user is still 'muted' even when came back from somewhr else
            localStorage.setItem('user_is_muted', is_muted_after_muted);
            
            // -- for DISABLE buttons when MUTED --
            /*    USYD CODE CITATION ACKNOWLEDGEMENT
            I declare that the following lines of code have been taken from the
            websites titled: 
            -- "How to disable a button in JavaScript" 
            -- "Disable all buttons on page"
            Original URL
            -- https://www.altcademy.com/blog/how-to-disable-a-button-in-javascript/
            -- https://stackoverflow.com/questions/30479448/disable-all-buttons-on-page
            Last access May, 2024   */
            var comment_buttons = document.querySelectorAll('.comment-class');
            comment_buttons.forEach(function(button) { 
                button.setAttribute('disabled', '');
            });

            var edit_buttons = document.querySelectorAll('.edit-class');
            edit_buttons.forEach(function(button) { 
                button.setAttribute('disabled', '');
            });

            var create_article_buttons = document.querySelector('.create_article-button');
            create_article_buttons.setAttribute('disabled', '');
        }
    });
    
// -----------------------------------------------------------------------------------

    socket.on('user_unmuted', function(data) {
        let unmuted_username = data.unmuted_username;
        let is_muted_after_UNmuted = data.is_muted_after_UNmuted;

        // socket.on('user_unmuted', function(unmuted_username) {
        if (username === unmuted_username) {
            user_is_muted = is_muted_after_muted;  
            
            // set local storage 'is_muted' to 'true'
            localStorage.setItem('user_is_muted', is_muted_after_UNmuted);
            
            // -- for ENABLE buttons when UNMUTED --
            /*    USYD CODE CITATION ACKNOWLEDGEMENT
            I declare that the following lines of code have been taken from the
            websites titled: "How to disable a button in JavaScript" 
            Original URL
            https://www.altcademy.com/blog/how-to-disable-a-button-in-javascript/
            Last access May, 2024   */
            var comment_buttons = document.querySelectorAll('.comment-class');
            comment_buttons.forEach(function(button) { 
                button.removeAttribute('disabled');
            });

            var edit_buttons = document.querySelectorAll('.edit-class');
            edit_buttons.forEach(function(button) { 
                button.removeAttribute('disabled');
            });

            var create_article_buttons = document.querySelector('.create_article-button');
            if(create_article_buttons !== null) {
                create_article_buttons.removeAttribute('disabled');
            }
        }
    });

// -----------------------------------------------------------------------------------

    // to handle MUTE or UNMUTE users
    window.onload = function () {

        let user_is_muted = "{{ is_muted }}";
        {# localStorage.clear(); #}

        // check if the user is muted
        if(user_is_muted === 'true') {
            
            user_is_muted = true;
            var comment_buttons = document.querySelectorAll('.comment-class');
            comment_buttons.forEach(function(button) { 
                button.setAttribute('disabled', '');
            });

            var edit_buttons = document.querySelectorAll('.edit-class');
            edit_buttons.forEach(function(button) { 
                button.setAttribute('disabled', '');
            });

            var create_article_buttons = document.querySelector('.create_article-button');
            if(create_article_buttons !== null) {
                create_article_buttons.setAttribute('disabled', 'disabled');
            }
        }

        // disable another checkbox when one is checked
        /*    USYD CODE CITATION ACKNOWLEDGEMENT
        I declare that the following lines of code have been taken from the
        websites titled: "<input type="checkbox">" 
        Original URL
        https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input/checkbox#checked
        Last access May, 2024   */
        let posting_no_name = document.getElementById('posting_no_name');
        let posting_private = document.getElementById('posting_private');

        posting_no_name.addEventListener('change', function() {
            posting_private.disabled = this.checked; 
        });
        
        posting_private.addEventListener('change', function() {
            posting_no_name.disabled = this.checked; 
        });
    }    


// -----------------------------------------------------------------------------------


    // new article modal event handling
    function to_create_article() {
        var modal = document.getElementById("newArticleModal");
        
        /*    USYD CODE CITATION ACKNOWLEDGEMENT
        I declare that the following lines of code have been taken from the
        websites titled: "window.onclick = function(event) only works for first item" 
        Original URL
        https://stackoverflow.com/questions/45393553/window-onclick-functionevent-only-works-for-first-item
        Last access May, 2024   */
        var span = modal.querySelector(".close");

        modal.style.display = "block";
        span.addEventListener('click', function() {
            modal.style.display = "none";
            $("#newArticleModal").hide();
            $("#new_title").val("");
            $("#new_content").val("");
            document.getElementById("posting_no_name").checked = false;
            document.getElementById("posting_private").checked = false;
        });
        
        /* window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        } */
    }


// -----------------------------------------------------------------------------------


    // from modal clicked 'Post' button
    function to_post_article() {

        let username = "{{ username }}";
        let role = "{{ role }}";
        let post_private = "no";

        // user input for title, content, check box (if checked)
        let title_value = $("#new_title").val();
        let content_value = $('#new_content').val();
        let no_name_checked = $('#posting_no_name').is(':checked');
        let post_private_checked = $('#posting_private').is(':checked');

        // post anonymously checkbox checked
        if (no_name_checked) {
            username = "Anon";
            role = "Anon";
        }

        if (post_private_checked) {
            post_private = "yes";
        } 

        // EMPTY USER INPUTS
        if (title_value.trim() === "" || content_value.trim() === "") {
            alert("Some of the inputs are empty. Please fill them in to confirm.")
        
        // title and content boxes WITH inputs
        } else {
            // parse into socket_routes.py -> create_new_article()
            socket.emit("create_new_article", username, user_id, role, title_value, content_value, post_private);
            
            // close the modal after clicking 'POST' button
            $("#newArticleModal").hide();
            $("#new_title").val("");
            $("#new_content").val("");
            document.getElementById("posting_no_name").checked = false;
            document.getElementById("posting_private").checked = false;
        }
    }


// -----------------------------------------------------------------------------------


    // comment modal event handling
    function comment_on_article(article_id) {

        var modal = document.getElementById("commentModal");
        var span = modal.querySelector(".close");
        // set custom HTML attributes
        /*    USYD CODE CITATION ACKNOWLEDGEMENT
        I declare that the following lines of code have been taken from the
        websites titled: "HTML5 Custom Data Attributes (data-*)" 
        Original URL
        https://html5doctor.com/html5-custom-data-attributes/
        Last access May, 2024   */
        modal.dataset.article_id = article_id;
        modal.style.display = "block";
        span.addEventListener('click', function() {
            modal.style.display = "none";
        });
        
        /* window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        } */
    }


// -----------------------------------------------------------------------------------


    function insert_comment_into_db() {
        let username = "{{ username }}";
        let user_id = "{{ user_id }}";
        let role = "{{ role }}";
        let comment_value = $("#new_comment").val();

        var modal = document.getElementById("commentModal");
        var article_id = modal.dataset.article_id;

        // WITH USER INPUTS
        if (!(comment_value.trim() === "")) {
            socket.emit("insert_new_comment", article_id, username, user_id, role, comment_value);
            $("#commentModal").hide();
            $("#new_comment").val("");  // clear input box
        } else {
            alert("Are you sure you want to discard?")
        }
    }


// -----------------------------------------------------------------------------------


    function for_EDIT_modal(article_id) {
        var modal = document.getElementById("editArticleModal");

        /*    USYD CODE CITATION ACKNOWLEDGEMENT
        I declare that the following lines of code have been taken from the
        websites titled: "window.onclick = function(event) only works for first item" 
        Original URL
        https://stackoverflow.com/questions/45393553/window-onclick-functionevent-only-works-for-first-item
        Last access May, 2024   */
        var span = modal.querySelector(".close");
        modal.dataset.article_id = article_id;

        modal.style.display = "block";
        span.addEventListener('click', function() {
            modal.style.display = "none";
        });
        
        /* window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        } */
    }

// -----------------------------------------------------------------------------------


    function for_DELETE_ARTICLE(article_id) {
        socket.emit("delete_article", article_id);
    }


    function for_DELETE_COMMENT(article_id, content) {
        socket.emit("delete_comment", article_id, content);
    }

    function after_muted(user_id, article_id) {
        socket.emit("handle_mute_user", user_id);
    }


// -----------------------------------------------------------------------------------


    function edit_article_into_db() {

        let username = "{{ username }}";
        let role = "{{ role }}";

        // user input for title, content, check box (if checked)
        let title_value = $("#edit_title").val();
        let content_value = $('#edit_content').val();

        var modal = document.getElementById("editArticleModal");
        var article_id = modal.dataset.article_id;

        // EMPTY USER INPUTS
        if (title_value.trim() === "" || content_value.trim() === "") {
            
            if (confirm('Discard?')) {
                // alert("Please fill in the title and content inputs.")
                $("#editArticleModal").hide();
                $("#edit_title").val("");       // clear input box
                $("#edit_content").val("");
            }
        
        } else {
            // parse to socket_routes.py for db commit
            socket.emit("edit_article", article_id, title_value, content_value);
            $("#editArticleModal").hide();  // close the modal
            $("#edit_title").val("");       // clear input box
            $("#edit_content").val("");
        }
    }


// -----------------------------------------------------------------------------------


    async function to_logout() {
        let logoutURL = "{{ url_for('logout', username=username) }}";
        window.location.href = logoutURL;
    } 

    async function to_homepage() {      // url - app.py function name
        let homebuttonsURL = "{{ url_for('table', username=username, user_id=user_id, role=role, is_muted=is_muted) }}";
        window.location.href = homebuttonsURL;
    } 

    async function to_addfriend() { 
        let addfriendURL = "{{ url_for('add_friend', username=username, user_id=user_id, role=role, is_muted=is_muted) }}";
        window.location.href = addfriendURL;
    }  

    async function to_friendrequest() {
        let friendrequestURL = "{{ url_for('display_friendrequest', username=username, user_id=user_id, role=role, is_muted=is_muted) }}";
        window.location.href = friendrequestURL;
    }  

    async function to_friendlist() {
        let friendlistURL = "{{ url_for('display_friendlist', username=username, user_id=user_id, role=role, is_muted=is_muted) }}";
        window.location.href = friendlistURL;
    }
</script>
{% endblock %}